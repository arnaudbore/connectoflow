process {
    tag = {"$sid"}
    publishDir = {"./results_conn/$sid/$task.process"}
    errorStrategy = { task.attempt <= 3 ? 'retry' : 'ignore' }
    maxRetries = 3
    maxErrors = -1
    scratch = true
    stageInMode = 'copy'
    stageOutMode = 'rsync'
}

params {
    help=false
    root=false
    template=false
    labels_list=false
    labels_img_prefix=''
    output_dir="./results_conn/"

    apply_t1_labels_transfo=true

    // **COMMIT options**//
        run_commit=true
        use_commit2=true
        b_thr=50
        nbr_dir=500
        ball_stick=true
        para_diff="1.7E-3"
        perp_diff="0.85E-3 0.51E-3"
        iso_diff="1.7E-3"

    // **Decompose options**//
        no_pruning=false
        no_remove_loops=false
        no_remove_outliers=false
        min_length=20
        max_length=200
        loop_max_angle=330
        outlier_threshold=0.5

    // **AFD & RD options**//
        run_afd_rd=true
        length_weighting=false
        sh_basis="descoteaux07"

    min_lesion_vol=7
    use_similarity_metric=true
    nbr_subjects_for_avg_connections=50

    // **Number of processes per tasks**//
        processes_register=4
        processes_commit=8
        processes_afd_rd=4
        processes_avg_similarity=8
        processes_connectivity=4
        params.decompose_memory_limit='6 GB'
        params.commit_memory_limit='6 GB'

    //**Process control**//
        processes = false
}

if(params.processes) {
    if(params.processes > Runtime.runtime.availableProcessors()) {
        throw new RuntimeException("Number of processes higher than available CPUs.")
    }
    else if(params.processes < 1) {
        throw new RuntimeException("When set, number of processes must be >= 1 " +
                                   "and smaller or equal to the number of CPUs.")
    }
    else {
        executor.$local.cpus = params.processes
    }
}

process.publishDir = {"$params.output_dir/$sid/$task.process"}
params.kernel_output_dir = "${params.output_dir}/Compute_Kernel"
params.avg_conn_output_dir = "${params.output_dir}/Average_Connections"

singularity.autoMounts = true

profiles {
    large_dataset {
        params.decompose_memory_limit='12 GB'
        params.commit_memory_limit='12 GB'
    }

    fully_reproducible {
        params.processes_register=1
    }

    macos {
            process.scratch="/tmp"
    }
}
